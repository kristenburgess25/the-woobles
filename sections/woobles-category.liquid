{{ 'woobles-templates.js' | asset_url | script_tag }}
{{ 'woobles-variables.css' | asset_url | stylesheet_tag }}
{{ 'woobles-landing.css' | asset_url | stylesheet_tag }}
{{ 'woobles-featured-product.css' | asset_url | stylesheet_tag }}
{{ 'woobles-product-tile.css' | asset_url | stylesheet_tag }}

{% if featured_wooble_image %}
  <link
    rel="preload"
    as="image"
    href="{{ featured_wooble_image }}"
    fetchpriority="high">
{% endif %}
<!-- preloading featured/largest image improves performance, would be best if coming from server-rendered shopify data -->

<div 
  id="wooble-category-page" 
  class="page-width section-template"
  data-show-add-to-cart="{{ section.settings.show_add_to_cart }}"
>
  <h1 class="title">Meet the Woobles</h1>

  {%- assign woobles_data = 'woobles-products.json' | asset_url -%}
  <script id="wooble-data" type="application/json" data-source="{{ woobles_data }}"></script>

  <div id="featured-wooble"></div>
  <div id="beginner"></div>
  <div id="beginner-plus"></div>
  <div id="bundles"></div>
  <div id="intermediate"></div>
  <div id="accessory"></div>
</div>

{% javascript %}
document.addEventListener('DOMContentLoaded', () => {
  const source = document.getElementById('wooble-data')?.getAttribute('data-source');
  if (!source) return console.error("Woobles data source not found.");

  fetch(source)
    .then(res => res.json())
    .then(data => {
      const products = Array.isArray(data.products)
        ? data.products
        : Array.isArray(data)
        ? data
        : null;

      if (!products) throw new Error("Invalid JSON format");

      const featuredProduct = products.find(p => {
        const tags = p.tags?.split(',').map(t => t.trim().toLowerCase()) || [];
        return tags.includes("featured");
      });

      if (featuredProduct) {
        renderFeatured(featuredProduct);
      }

      const sectionGroups = {
        bundles: [],
        intermediate: [],
        "beginner-plus": [],
        beginner: [],
        accessory: [],
      };

      const assignedIds = new Set();
      const featuredId = featuredProduct?.id;

      products.forEach(product => {
        if (product.id === featuredId || assignedIds.has(product.id)) return;

        const type = (product.product_type || "").toLowerCase();
        const title = product.title?.toLowerCase() || "";

        if (title.includes("bundle")) sectionGroups.bundles.push(product);
        else if (type.includes("intermediate")) sectionGroups.intermediate.push(product);
        else if (type.includes("beginner+") || type.includes("beginner plus")) sectionGroups["beginner-plus"].push(product);
        else if (type.includes("beginner")) sectionGroups.beginner.push(product);
        else if (type.includes("accessory")) sectionGroups.accessory.push(product);
        else return console.warn("Uncategorized product:", product.title);

        assignedIds.add(product.id);
      });

      Object.entries(sectionGroups).forEach(([id, group]) => {
        const el = document.getElementById(id);
        renderSection(el, id, group);
      });
    })
    .catch(err => {
      console.error("Failed to load or parse JSON:", err);
      document.querySelector(".woobles-category-page")?.insertAdjacentHTML(
        'beforeend',
        `<p style="color:red;">Oops! Failed to load Woobles data.</p>`
      );
    });

  const { productTileTemplate, featuredProductTemplate } = window.WooblesTemplates;

  const renderFeatured = (product) => {
    const container = document.getElementById("featured-wooble");
    container.innerHTML = featuredProductTemplate(product);
  };

  const renderSection = (container, title, products) => {
    if (!container) return;

    let html = `<h2>${formatTitle(title)}</h2><div class="wooble-grid">`;
    products.forEach(product => {
      html += productTileTemplate(product);
    });
    html += `</div>`;
    container.innerHTML = html;
  };

  const formatTitle = (key) => {
    switch (key) {
      case "bundles": return "Bundles";
      case "intermediate": return "Intermediate Kits";
      case "beginner-plus": return "Beginner+ Kits";
      case "beginner": return "Beginner Kits";
      case "accessory": return "Accessory Kits";
      default: return key;
    }
  };
});
{% endjavascript %}

{% schema %}
{
  "name": "Woobles Category Page",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "product",
      "id": "featured_wooble_product",
      "label": "Featured Wooble Product"
    },
    {
      "type": "checkbox",
      "id": "show_add_to_cart",
      "label": "Show Add to Cart buttons on product tiles",
      "default": false
    }
  ]
}
{% endschema %}
